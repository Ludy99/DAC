#ifndef __MAIN_H
#define __MAIN_H

#include"Delay.h"
#include "stm32f10x.h"

/* Private  ------------------------------------------------------------*/
#define RELAY_A_Port					GPIOD
#define RELAY_A_Pin						GPIO_Pin_0                           
#define RELAY_A_RCC_APB2Periph			RCC_APB2Periph_GPIOD  //PD0   RELAYA

#define RELAY_B_Port					GPIOD
#define RELAY_B_Pin						GPIO_Pin_1
#define RELAY_B_RCC_APB2Periph			RCC_APB2Periph_GPIOD  //PD1   RELAYB       

#define RELAY_C_Port					GPIOD
#define RELAY_C_Pin						GPIO_Pin_2
#define RELAY_C_RCC_APB2Periph			RCC_APB2Periph_GPIOD  //PD2   RELAYC  

#define RELAY_D_Port					GPIOD
#define RELAY_D_Pin						GPIO_Pin_3
#define RELAY_D_RCC_APB2Periph			RCC_APB2Periph_GPIOD  //PD3   RELAYD

#define RELAY_E_Port					GPIOD
#define RELAY_E_Pin						GPIO_Pin_4
#define RELAY_E_RCC_APB2Periph			RCC_APB2Periph_GPIOD  //PD4   RELAYE

#define RELAY_F_Port					GPIOD
#define RELAY_F_Pin						GPIO_Pin_5
#define RELAY_F_RCC_APB2Periph			RCC_APB2Periph_GPIOD  //PD5    RELAYF


#define TRIGGER_TA_Port						GPIOA
#define TRIGGER_TA_Pin						GPIO_Pin_5
#define TRIGGER_TA_RCC_APB2Periph			RCC_APB2Periph_GPIOA //PA5   TA-CPU


#define TRIGGER_TB_Port						GPIOA
#define TRIGGER_TB_Pin						GPIO_Pin_4
#define TRIGGER_TB_RCC_APB2Periph			RCC_APB2Periph_GPIOA //PA4   TB-CPU

#define TRIGGER_TC_Port						GPIOA
#define TRIGGER_TC_Pin						GPIO_Pin_3
#define TRIGGER_TC_RCC_APB2Periph			RCC_APB2Periph_GPIOA //PA3   TC-CPU

#define TRIGGER_HA_Port						GPIOA
#define TRIGGER_HA_Pin						GPIO_Pin_2
#define TRIGGER_HA_RCC_APB2Periph			RCC_APB2Periph_GPIOA //PA2   HA-CPU

#define TRIGGER_HB_Port						GPIOA
#define TRIGGER_HB_Pin						GPIO_Pin_1
#define TRIGGER_HB_RCC_APB2Periph			RCC_APB2Periph_GPIOA //PA1   HB-CPU

#define TRIGGER_HC_Port						GPIOA
#define TRIGGER_HC_Pin						GPIO_Pin_0
#define TRIGGER_HC_RCC_APB2Periph			RCC_APB2Periph_GPIOA //PA0   HC-CPU

#define TRIGGER_TD_Port						GPIOD
#define TRIGGER_TD_Pin						GPIO_Pin_13
#define TRIGGER_TD_RCC_APB2Periph			RCC_APB2Periph_GPIOD //PD13   TD-CPU


#define TRIGGER_TE_Port						GPIOD
#define TRIGGER_TE_Pin						GPIO_Pin_12
#define TRIGGER_TE_RCC_APB2Periph			RCC_APB2Periph_GPIOD //PD12   TE-CPU


#define TRIGGER_TF_Port						GPIOD
#define TRIGGER_TF_Pin						GPIO_Pin_11
#define TRIGGER_TF_RCC_APB2Periph			RCC_APB2Periph_GPIOD //PD11   TF-CPU


#define TRIGGER_HD_Port						GPIOD
#define TRIGGER_HD_Pin						GPIO_Pin_10
#define TRIGGER_HD_RCC_APB2Periph			RCC_APB2Periph_GPIOD //PD10   HD-CPU

#define TRIGGER_HE_Port						GPIOD
#define TRIGGER_HE_Pin						GPIO_Pin_9
#define TRIGGER_HE_RCC_APB2Periph			RCC_APB2Periph_GPIOD //PD9   HE-CPU

#define TRIGGER_HF_Port						GPIOD
#define TRIGGER_HF_Pin						GPIO_Pin_8
#define TRIGGER_HF_RCC_APB2Periph			RCC_APB2Periph_GPIOD //PD8   HF-CPU

#define H025_Port					GPIOE
#define H025_Pin					GPIO_Pin_15
#define H025_RCC_APB2Periph			RCC_APB2Periph_GPIOE //PE15   H025

#define H050_Port					GPIOE
#define H050_Pin					GPIO_Pin_14
#define H050_RCC_APB2Periph			RCC_APB2Periph_GPIOE //PE14   H050

#define H100_Port					GPIOE
#define H100_Pin					GPIO_Pin_13
#define H100_RCC_APB2Periph			RCC_APB2Periph_GPIOE //PE13   H100

#define H150_Port					GPIOE
#define H150_Pin					GPIO_Pin_12
#define H150_RCC_APB2Periph			RCC_APB2Periph_GPIOE //PE12   H150

#define H200_Port					GPIOE
#define H200_Pin					GPIO_Pin_11
#define H200_RCC_APB2Periph			RCC_APB2Periph_GPIOE //PE11   H200

#define H250_Port					GPIOE
#define H250_Pin					GPIO_Pin_10
#define H250_RCC_APB2Periph			RCC_APB2Periph_GPIOE //PE10   H250

#define T025_Port					GPIOE
#define T025_Pin					GPIO_Pin_9
#define T025_RCC_APB2Periph			RCC_APB2Periph_GPIOE //PE9   T025

#define T050_Port					GPIOE
#define T050_Pin					GPIO_Pin_8
#define T050_RCC_APB2Periph			RCC_APB2Periph_GPIOE //PE8   T050


#define T100_Port					GPIOE
#define T100_Pin					GPIO_Pin_7
#define T100_RCC_APB2Periph			RCC_APB2Periph_GPIOE //PE7   T100

#define T150_Port					GPIOB
#define T150_Pin					GPIO_Pin_2
#define T150_RCC_APB2Periph			RCC_APB2Periph_GPIOB //PB2   T150


#define T200_Port					GPIOB
#define T200_Pin					GPIO_Pin_1 
#define T200_RCC_APB2Periph			RCC_APB2Periph_GPIOB //PB1   T200

#define T250_Port					GPIOB
#define T250_Pin					GPIO_Pin_0 
#define T250_RCC_APB2Periph			RCC_APB2Periph_GPIOB //PB0   T250

#define TIMEn                                          6   
#define PhaseSize                                       6           //未用
#define TimeSize									    6           //未用
#define RELAYn                                          6 
#define TriggerSize										12          //未用  
#define TRIGGERn 										12
#define MAKETIME(low,high) \
        ((uint16_t)(((uint8_t)(low)) | ((uint16_t)((uint8_t)(high))) << 8))
typedef enum 
{
  TIME1 = 0,
  TIME2 = 1,
  TIME3 = 2,
  TIME4 = 3,
  TIME5 = 4,
  TIME6 = 5,
} Time_TypeDef;
typedef enum 
{
  RELAY1 = 0,
  RELAY2 = 1,
  RELAY3 = 2,
  RELAY4 = 3,
  RELAY5 = 4,
  RELAY6 = 5,
} Relay_TypeDef;
typedef enum 
{
  TRIGGER1 = 0,
  TRIGGER2 = 1,
  TRIGGER3 = 2,
  TRIGGER4 = 3,
  TRIGGER5 = 4,
  TRIGGER6 = 5,
  TRIGGER7 = 6,
  TRIGGER8 = 7,
  TRIGGER9 = 8,
  TRIGGER10= 9,
  TRIGGER11= 10,
} Trigger_TypeDef;
typedef enum {FALSE = 0, TRUE = !FALSE} bool;
typedef enum {BUF_NO1=0,BUF_NO2=1}BUF_NO;
bool Buf_Ok;	//BUF是否已经可用
BUF_NO Free_Buf_Now;
uint8_t  Flag=0;
uint8_t  TH_2=0;			 //ABC三相标志 1代表三相操作 0代表单相操作
uint8_t  TH_3=0;			 //DEF三相标志 1代表三相操作 0代表单相操作
uint8_t  TH_4=0;			 //双跳标志
uint8_t  TH_5=0;			 //断路器失灵标志
uint8_t  TH_6=0;			 //断路器失灵延时时间标志
uint16_t Time_T[6]={0,0,0,0,0,0};			 //跳闸时间
uint16_t Time_H[6]={0,0,0,0,0,0};			 //合闸时间
uint8_t TimeT_Correct[6]={0,0,0,0,0,0};			 //跳闸校正时间
uint8_t TimeH_Correct[6]={0,0,0,0,0,0};			 //合闸校正时间
u8 USART1_DMA_Buf1[512];
u8 USART1_DMA_Buf2[512];

u8 USART3_DMA_Buf1[512];
u8 USART3_DMA_Buf2[512];

u8 Relay_Status[18]={0x5A,0xA5,0x0F,0x82,0x00,0x34,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};   //ABC,DEF6个继电器的状态
u8 Machine_Status[8]={0x5A,0xA5,0x05,0x82,0x00,0x25,0x00,0x00};		 //断路器现在是正常状态还是失灵状态
//u8 USART1_SEND_DATA[512];     
//u8 USART2_SEND_DATA[512]; 
u8 USART1_RECEIVE_DATA[512]; 
u8 USART2_RECEIVE_DATA[512];
u8 USART3_RECEIVE_DATA[512]; 


/***************key******************/

//#define CHOOSE_MODE GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_1)

/***************key******************/


#define USART3_ENABLE	
uint8_t  Flag_u=0;//BUF1空闲本地远程标志20190531

//发送 80 指令使用 56 寄存器将上述数据存入存储器中：
//5A A5 0C 80 0x40 5A（申请更新） 50（写入数据库） 0x40,0x00,0x00,0x00（数据库首地址） 0x00,0x10（变量地址） 0x00,0x16（写入数据的长度）
uint8_t StatusBuffer_Save[15]={0x5A,0xA5,0x0C,0x80,0x40,0x5A,0x50,0x40,0x00,0x00,0x00,0x00,0x10,0x00,0x20};	 //把变量存储空间的值包括时间设置、补偿时间、电流设置模式设置写入字库
uint8_t StatusBuffer_Restore[15]={0x5A,0xA5,0x0C,0x80,0x40,0x5A,0xA0,0x40,0x00,0x00,0x00,0x00,0x10,0x00,0x20};	//开机把保存在字库里面的数据读入变量存储空间
uint8_t Tx_Change[7]={0x5A,0xA5,0x04,0x80,0x03,0x00,0x10};		//切换到断路器失灵界面 0x10=16（页），0x03：（读：当前显示页面ID，写：切换到指定页面）
uint8_t Tx_Return[7]={0x5A,0xA5,0x04,0x80,0x03 ,0x00,0x0B};		//返回主界面 0x0B=11（页）
uint8_t Tx_Tips[7]={0x5A,0xA5,0x04,0x80,0x03,0x00,0x11};		//切换到断路器失灵倒数计时20秒界面 0x11=17（页）
uint8_t Tx_Cancle[8]={0x5A,0xA5,0x05,0x82,0x00,0x25,0x00,0x00};	//版本号：0x00，断路器失灵按钮（0x25）恢复正常
uint8_t Ts[7]={0x5A,0xA5,0x04,0x83,0x00,0x10,0x20};	 			//开机去读变量存储空间的内容22个字的内容用来后续程序的恢复上次的工作模式

uint8_t TA[8]={0x5A,0xA5,0x05,0x82,0x00,0x34,0x00,0x00};            //0x5AA5:帧头（2个字节）
uint8_t TB[8]={0x5A,0xA5,0x05,0x82,0x00,0x35,0x00,0x00};            //0x05:数据长度,该项右侧全部数据（指令、数据、CRC校验 ）的长度和
uint8_t TC[8]={0x5A,0xA5,0x05,0x82,0x00,0x36,0x00,0x00};            //0x82:写数据存储区指令（指令0x80-0x84之一）
uint8_t TD[8]={0x5A,0xA5,0x05,0x82,0x00,0x37,0x00,0x00};            //0x37,0x00:数据（N字节，应符合各个控件的要求）
uint8_t TE[8]={0x5A,0xA5,0x05,0x82,0x00,0x38,0x00,0x00};            //0x01:CRC校验,不包括帧头和数据长度，仅针对指令和数据进行校验（2字节）可无CRC校验，CONFIG.TXT文件的R2.4决定是否启用。
uint8_t TF[8]={0x5A,0xA5,0x05,0x82,0x00,0x39,0x00,0x00};            //启用 CRC 帧校验并开启自动应答功能后（R2.4=1，RC.3=1）

uint8_t HA[8]={0x5A,0xA5,0x05,0x82,0x00,0x34,0x00,0x01};            //0x34：A相合闸变量地址
uint8_t HB[8]={0x5A,0xA5,0x05,0x82,0x00,0x35,0x00,0x01};            //1合闸，0跳闸
uint8_t HC[8]={0x5A,0xA5,0x05,0x82,0x00,0x36,0x00,0x01};
uint8_t HD[8]={0x5A,0xA5,0x05,0x82,0x00,0x37,0x00,0x01};
uint8_t HE[8]={0x5A,0xA5,0x05,0x82,0x00,0x38,0x00,0x01};
uint8_t HF[8]={0x5A,0xA5,0x05,0x82,0x00,0x39,0x00,0x01};

uint8_t Count_21[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x15};	    //断路器失灵20秒倒计显示
uint8_t Count_20[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x14};
uint8_t Count_19[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x13};
uint8_t Count_18[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x12};
uint8_t Count_17[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x11};
uint8_t Count_16[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x10};
uint8_t Count_15[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x0F};
uint8_t Count_14[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x0E};
uint8_t Count_13[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x0D};
uint8_t Count_12[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x0C};
uint8_t Count_11[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x0B};
uint8_t Count_10[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x0A};
uint8_t Count_9[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x09};
uint8_t Count_8[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x08};
uint8_t Count_7[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x07};
uint8_t Count_6[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x06};
uint8_t Count_5[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x05};
uint8_t Count_4[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x04};
uint8_t Count_3[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x03};
uint8_t Count_2[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x02};
uint8_t Count_1[8]={0x5A,0xA5,0x05,0x82,0x00,0x3B,0x00,0x01};

uint8_t TxBuffer1[12]={0x5A,0xA5,0x09,0x82,0x00,0x34,0x00,0x01,0x00,0x01,0x00,0x01};					//ABC三相全部合闸 1合闸
uint8_t TxBuffer2[12]={0x5A,0xA5,0x09,0x82,0x00,0x37,0x00,0x01,0x00,0x01,0x00,0x01};					//DEF三相全部合闸
uint8_t TxBuffer3[12]={0x5A,0xA5,0x09,0x82,0x00,0x34,0x00,0x00,0x00,0x00,0x00,0x00};					//ABC三相全部跳闸 0跳闸
uint8_t TxBuffer4[12]={0x5A,0xA5,0x09,0x82,0x00,0x37,0x00,0x00,0x00,0x00,0x00,0x00};					//DEF三相全部跳闸	 

uint8_t TimeT1[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x00,0xFA};																	//下拉菜单1对应的跳闸电流250mA，0x12为跳闸电流显示变量地址
uint8_t TimeT2[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x01,0xF4};																 	//下拉菜单2对应的跳闸电流500mA，0x01F4=500
uint8_t TimeT3[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x03,0xE8};																  //下拉菜单3对应的跳闸电流1000mA
uint8_t TimeT4[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x05,0xDC};																	//下拉菜单4对应的跳闸电流1500mA
uint8_t TimeT5[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x07,0xD0};																	//下拉菜单5对应的跳闸电流2000mA
uint8_t TimeT6[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x09,0xC4};																	//下拉菜单6对应的跳闸电流2500mA

uint8_t TimeH1[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x00,0xFA};																	//下拉菜单1对应的合闸电流250mA 0x13为合闸电流显示变量地址
uint8_t TimeH2[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x01,0xF4};																  //下拉菜单2对应的合闸电流500mA
uint8_t TimeH3[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x03,0xE8};																	//下拉菜单3对应的合闸电流1000mA
uint8_t TimeH4[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x05,0xDC};																	//下拉菜单4对应的合闸电流1500mA
uint8_t TimeH5[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x07,0xD0};																	//下拉菜单5对应的合闸电流2000mA
uint8_t TimeH6[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x09,0xC4};																	//下拉菜单6对应的合闸电流2500mA

uint8_t Hertz1[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x00,0x14};//20HZ																	//下拉菜单1对应的跳闸电流250mA，0x12为跳闸电流显示变量地址
uint8_t Hertz2[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x00,0x32};//50HZ																	 	//下拉菜单2对应的跳闸电流500mA，0x01F4=500
uint8_t Hertz3[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x00,0x64};//100HZ																	  //下拉菜单3对应的跳闸电流1000mA
uint8_t Hertz4[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x00,0x96};//150HZ																		//下拉菜单4对应的跳闸电流1500mA
uint8_t Hertz5[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x01,0xF4};//500HZ																		//下拉菜单5对应的跳闸电流2000mA
uint8_t Hertz6[8]={0x5A,0xA5,0x05,0x82,0x00,0x12,0x03,0xE8};//1000HZ																		//下拉菜单6对应的跳闸电流2500mA

uint8_t Rad1[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x00,0x1E};	//30rad																//下拉菜单1对应的合闸电流250mA 0x13为合闸电流显示变量地址
uint8_t Rad2[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x00,0x2D};	//45rad																  //下拉菜单2对应的合闸电流500mA
uint8_t Rad3[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x00,0x3C};	//60rad																	//下拉菜单3对应的合闸电流1000mA
uint8_t Rad4[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x00,0x5A};	//90rad																	//下拉菜单4对应的合闸电流1500mA
uint8_t Rad5[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x00,0xB4};	//180rad																	//下拉菜单5对应的合闸电流2000mA
uint8_t Rad6[8]={0x5A,0xA5,0x05,0x82,0x00,0x13,0x01,0x0E};	//270rad																	//下拉菜单6对应的合闸电流2500mA

uint8_t TMax[8]={0x5A,0xA5,0x05,0x82,0x00,0x10,0x00,0x78};																		//最大的跳闸时间 0x78=120ms，0x10为跳闸时间显示变量地址
uint8_t TMin[8]={0x5A,0xA5,0x05,0x82,0x00,0x10,0x00,0x14};																		//最小的跳闸时间 0x14=20ms
uint8_t HMax[8]={0x5A,0xA5,0x05,0x82,0x00,0x11,0x02,0x58};																		//最大的合闸时间 0x258=600ms，0x11为合闸时间显示变量地址
uint8_t HMin[8]={0x5A,0xA5,0x05,0x82,0x00,0x11,0x00,0x28};																		//最小的合闸时间 0x28=40ms

uint8_t TMax1[8]={0x5A,0xA5,0x05,0x82,0x00,0x26,0x0C,0xE4};																		//最大的跳闸时间 0x78=120ms，0x10为跳闸时间显示变量地址
uint8_t TMin1[8]={0x5A,0xA5,0x05,0x82,0x00,0x26,0x00,0x00};																		//最小的跳闸时间 0x14=20ms
uint8_t HMax1[8]={0x5A,0xA5,0x05,0x82,0x00,0x27,0x0C,0xE4};																		//最大的合闸时间 0x258=600ms，0x11为合闸时间显示变量地址
uint8_t HMin1[8]={0x5A,0xA5,0x05,0x82,0x00,0x27,0x00,0x00};																		//最小的合闸时间 0x28=40ms


uint8_t key_FALSE[7]={0x5A,0xA5,0x04,0x80,0x03,0x00,0x21};																		  //密码输入错误切换到失败界面，0x21（33页）
uint8_t key_OK[7]={0x5A,0xA5,0x04,0x80,0x03,0x00,0x12};																		//密码输入正确切换到跳合时间补偿界面，0x12（18页）
uint16_t key=0;																																					//收到的密码
uint16_t key_True=2019;																																		//正确的密码
uint16_t Current_T=0;
uint16_t Current_H=0;
uint16_t Hertz=0;
uint16_t Rad=0;
u8 Start=0;	//0初始化状态,1自动进入状态，2手动进入状态，3进入查询状态																			
u8 USART1_TX_Finish=1;
u8 USART3_TX_Finish=1;
u8 UART4_TX_Finish=1;
u16 fac_ms=0;//ms延时倍乘数

u8 flag_mode=0;


DMA_InitTypeDef DMA_InitStructure;
TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
GPIO_TypeDef* Trigger_GPIO_PORT[TRIGGERn] = {TRIGGER_TA_Port, TRIGGER_HA_Port,
                                             TRIGGER_TB_Port, TRIGGER_HB_Port,
                                             TRIGGER_TC_Port, TRIGGER_HC_Port,
                                             TRIGGER_TD_Port, TRIGGER_HD_Port,
											 TRIGGER_TE_Port, TRIGGER_HE_Port,
                                             TRIGGER_TF_Port, TRIGGER_HF_Port};                               
uint16_t Trigger_GPIO_PIN[TRIGGERn] = {TRIGGER_TA_Pin, TRIGGER_HA_Pin,
                                       TRIGGER_TB_Pin, TRIGGER_HB_Pin,
                                       TRIGGER_TC_Pin, TRIGGER_HC_Pin,
                                       TRIGGER_TD_Pin, TRIGGER_HD_Pin, 
                                       TRIGGER_TE_Pin, TRIGGER_HE_Pin,
									   TRIGGER_TF_Pin, TRIGGER_HF_Pin};                         
uint32_t Trigger_GPIO_CLK[TRIGGERn] = {TRIGGER_TA_RCC_APB2Periph, TRIGGER_HA_RCC_APB2Periph,
                                       TRIGGER_TB_RCC_APB2Periph, TRIGGER_HB_RCC_APB2Periph,
                                       TRIGGER_TC_RCC_APB2Periph, TRIGGER_HC_RCC_APB2Periph,
									   TRIGGER_TD_RCC_APB2Periph, TRIGGER_HD_RCC_APB2Periph,
                                       TRIGGER_TE_RCC_APB2Periph, TRIGGER_HE_RCC_APB2Periph,
                                       TRIGGER_TF_RCC_APB2Periph, TRIGGER_HF_RCC_APB2Periph};                          
GPIO_TypeDef* TimeH_GPIO_PORT[TIMEn]={H025_Port,H050_Port,H100_Port,
                                      H150_Port,H200_Port,H250_Port};
GPIO_TypeDef* TimeT_GPIO_PORT[TIMEn]={T025_Port,T050_Port,T100_Port,
                                      T150_Port,T200_Port,T250_Port};
uint16_t TimeH_GPIO_PIN[TIMEn]={H025_Pin, H050_Pin,H100_Pin,
                                H150_Pin, H200_Pin,H250_Pin};
uint16_t TimeT_GPIO_PIN[TIMEn]={T025_Pin, T050_Pin,T100_Pin,
                                T150_Pin, T200_Pin,T250_Pin};
uint32_t TimeH_GPIO_CLK[TIMEn]={H025_RCC_APB2Periph,H050_RCC_APB2Periph,H100_RCC_APB2Periph,
                                H150_RCC_APB2Periph,H200_RCC_APB2Periph,H250_RCC_APB2Periph};
uint32_t TimeT_GPIO_CLK[TIMEn]={T025_RCC_APB2Periph,T050_RCC_APB2Periph,T100_RCC_APB2Periph,
                                T150_RCC_APB2Periph,T200_RCC_APB2Periph,T250_RCC_APB2Periph};						     
GPIO_TypeDef*RELAY_GPIO_PORT[RELAYn]={RELAY_A_Port,RELAY_B_Port,RELAY_C_Port,
                                      RELAY_D_Port,RELAY_E_Port,RELAY_F_Port};
uint16_t RELAY_GPIO_PIN[RELAYn] ={RELAY_A_Pin,RELAY_B_Pin,RELAY_C_Pin,
                                  RELAY_D_Pin,RELAY_E_Pin,RELAY_F_Pin};
uint32_t RELAY_GPIO_CLK[RELAYn]={RELAY_A_RCC_APB2Periph,RELAY_B_RCC_APB2Periph,RELAY_C_RCC_APB2Periph,
                                 RELAY_D_RCC_APB2Periph,RELAY_E_RCC_APB2Periph,RELAY_F_RCC_APB2Periph};
								 
/* Private function prototypes -----------------------------------------------*/
void TimeBase_Configuration(uint8_t Timer,uint8_t Time);
void CT_Operation(uint16_t Num);
void CH_Operation(uint16_t Num);
void HZ_Operation(uint16_t Num);
void RAD_Operation(uint16_t Num);
void Send(uint8_t*TxBuffer,uint8_t NbrOfDataToSend);
void USART_Configuration(void);
void UART4_Configuration(void);
//void USART3_Configuration(void);
void GPIO_Configuration(void);
void NVIC_Configuration(void);
void DMA2_Configuration(void);																	 
void LedGPIO_Configuration(void);
void KeyGPIO_Configuration(void);
void Menu_Handle(uint8_t *Buffer);
void Led(void);
								 void TIMET_Init(Time_TypeDef Time);
void TIMEH_Init(Time_TypeDef Time);
void RELAY_Init(Relay_TypeDef Relay);
void TRIGGER_Init(Trigger_TypeDef Trigger);
void DMA_Configuration(void);
void DMA3_Configuration(void);
void Send_Series_Data(uint8_t*TxBuffer,uint8_t NbrOfDataToSend);
void CurrentT_Operation(uint8_t Num);
void CurrentT_Handle(uint8_t Num);
void CurrentH_Operation( uint8_t Num);
void CurrentH_Handle(uint8_t Num);
void Hertz_Operation(uint8_t Num);
void Hertz_Handle(uint8_t Num);
void Rad_Operation( uint8_t Num);
void Rad_Handle(uint8_t Num);
void Status_Init(void);
uint8_t Get_Trigger_Value(void);
void Trigle_Handle(uint8_t Value);
void EXTI_Configuration(void);
void RCC_Configuration(void);
void Send_Series_Time(uint8_t Count);
void Save(uint8_t*TxBuffer_Save,uint8_t NbrOfDataToSend);
void Restore(uint8_t*TxBuffer_Restore,uint8_t NbrOfDataToSend);

/* Private functions ---------------------------------------------------------*/
#endif
